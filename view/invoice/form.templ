package invoice

import (
	"fmt"

	"github.com/angelofallars/hyperbill/view/component"
	"github.com/angelofallars/hyperbill/view/svg"
)

const inputStyle = "border px-2 h-7 bg-transparent disabled:text-gray-500 border-slate-400 border-1.5 rounded focus:border-transparent focus:ring-green-700 invalid:border-red-500 invalid:focus:ring-red-700 focus:outline-none focus:ring-2 selection:bg-green-500"

templ MakeInvoiceForm() {
	@component.Card("max-w-[24rem]") {
		<div class="flex flex-row justify-between items-center">
			<h2 class="mr-auto text-left text-2xl font-bold text-gray-900">Create Invoice</h2>
			<div id="htmx-indicator" class="htmx-indicator">
				@svg.Indicator()
			</div>
		</div>
		<form
			hx-post="/invoice"
			hx-target="#invoice"
			hx-swap="innerHTML"
			hx-indicator="#htmx-indicator"
			hx-disabled-elt="#submit-invoice"
			x-data="{ canSubmit: false, isHTMXRequest: false }"
			x-on:disable-submit.window="canSubmit = false"
			x-on:enable-submit.window="canSubmit = true"
			x-on:htmx:before-request="isHTMXRequest = true"
			x-on:htmx:after-request="isHTMXRequest = false"
			class="flex flex-col items-stretch h-full mb-0"
		>
			<div class="flex flex-col flex-1">
				@Boards(nil)
				<div
					class="flex flex-row flex-wrap gap-x-1.5 justify-stretch"
					x-data="{
                        startDate: $persist('').as('invoice_start-date'),
                        endDate: $persist('').as('invoice_end-date'),
                        async validate() {
                          const elEndDate = $el.querySelector('#end-date');
                          if (Date.parse(this.startDate) >= Date.parse(this.endDate)) {
                            elEndDate.setCustomValidity('End date must be later than start date.');
                          } else {
                            elEndDate.setCustomValidity('');
                          }
                          // Need to do this to show endDate validation error when startDate is modified
                          elEndDate.dispatchEvent(new CustomEvent('change', {}));
                        },
                    }"
					x-init="validate()"
					x-on:input="validate()"
					x-on:change="validate()"
				>
					@input("start-date", "Start date",
                            templ.Attributes{"type": "date", "required": "true",
                            "x-model": "startDate",
                            })
					@input("end-date", "End date",
                            templ.Attributes{"type": "date", "required": "true",
                            "x-model": "endDate",
                            })
				</div>
			</div>
			<fieldset class="flex flex-col mt-1.5 gap-1 items-start">
				<legend class="block font-medium mb-0.5 text-gray-900">Rate per hour</legend>
				@currencyInput("t5", "T5")
				@currencyInput("t4", "T4")
				@currencyInput("t3", "T3")
				@currencyInput("t2", "T2")
				@currencyInput("t1", "T1")
			</fieldset>
			<div class="mt-5 ml-auto flex flex-col items-end ">
				<p
					class="text-right text-sm text-red-700 max-w-[20rem]"
					x-data="{ message: '' }"
					x-text="message"
					x-on:set-error-message.window="message = $event.detail.value"
				></p>
				@component.Button(templ.Attributes{
                        "type": "submit",
                        "id": "submit-invoice",
                        "x-bind:disabled": "!canSubmit",
                        "x-init": `$watch('isHTMXRequest', value =>
                                     buttonDisabledClass = value ? 'disabled:cursor-wait'
                                                                 : 'disabled:cursor-not-allowed')`,
                        }) {
					Calculate
				}
			</div>
		</form>
		<div id="errors" class="mt-3"></div>
		@settings()
	}
}

type BoardProps struct {
	Name string
	ID   string
}

templ Boards(props []BoardProps) {
	<label for="board-id" class="block mt-1.5 font-medium text-gray-900">Trello Board</label>
	<select
		name="board-id"
		id="board-id"
		class={ inputStyle, "overflow-ellipsis max-w-[20rem]" }
		{ persistInput("board-id")... }
		if len(props) == 0 {
			disabled
		}
	>
		if len(props) == 0 {
			<option>{ "N/A" }</option>
		}
		for _, board := range props {
			<option value={ board.ID }>{ board.Name }</option>
		}
	</select>
}

templ input(id, label string, inputAttrs templ.Attributes) {
	<div
		class="flex-1"
		x-data="{ validationMessage: '' }"
	>
		<label for={ id } class="block mt-1.5 font-medium text-gray-900">{ label }</label>
		<input
			{ inputAttrs... }
			name={ id }
			id={ id }
			class={ inputStyle, "w-full" }
			x-on:input="validationMessage = $el.validationMessage"
			x-on:change="validationMessage = $el.validationMessage"
		/>
		<p
			x-text="validationMessage"
			class="text-xs text-red-700"
		></p>
	</div>
}

templ currencyInput(id, label string) {
	<div
		class="flex flex-row items-start gap-1 flex-1"
		x-data="{ validationMessage: '' }"
	>
		<label for={ id } class="font-medium text-gray-900">{ label }</label>
		<div>
			<div class="relative">
				<div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-1">
					<span class="text-gray-500">$</span>
				</div>
				<input
					type="number"
					step="0.01"
					min="0"
					name={ id }
					id={ id }
					class={ inputStyle, "pl-4 mr-auto max-w-40" }
					required
					x-on:input="validationMessage = $el.validationMessage"
					x-on:change="validationMessage = $el.validationMessage"
					{ persistInput(id)... }
				/>
			</div>
			<p
				x-text="validationMessage"
				class="text-xs text-red-700"
			></p>
		</div>
	</div>
}

func persistInput(name string) templ.Attributes {
	return templ.Attributes{
		"x-data":  fmt.Sprintf("{ value: $persist('').as('invoice_%s') }", name),
		"x-model": "value",
	}
}
