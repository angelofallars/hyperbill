package invoice

import (
	"fmt"

	"github.com/angelofallars/gotemplate/view/component"
	"github.com/angelofallars/gotemplate/view/svg"
)

const inputStyle = "border px-2 h-7 bg-transparent disabled:text-gray-500 border-slate-400 border-1.5 rounded focus:border-transparent focus:ring-green-700 focus:outline-none focus:ring-2 selection:bg-green-500"

type BoardProps struct {
	Name string
	ID   string
}

templ Boards(props []BoardProps) {
	<label for="board-id" class="block mt-1.5 font-medium text-gray-900">Trello Board</label>
	<select
		name="board-id"
		id="board-id"
		class={ inputStyle, "overflow-ellipsis max-w-[20rem]" }
		x-data="{ value: $persist('').as('invoice_board-id') }"
		x-on:change="value = $el.value"
		x-init="$refs[value]?.setAttribute('selected', '')"
		if len(props) == 0 {
			disabled
		}
	>
		if len(props) == 0 {
			<option>{ "N/A" }</option>
		}
		for _, board := range props {
			<option x-ref={ board.ID } value={ board.ID }>{ board.Name }</option>
		}
	</select>
}

templ MakeInvoiceForm() {
	@component.Card("max-w-[24rem]") {
		<div class="flex flex-row justify-between items-center">
			<h2 class="mr-auto text-left text-2xl font-bold text-gray-900">Create Invoice</h2>
			<div id="htmx-indicator" class="htmx-indicator">
				@svg.Indicator()
			</div>
		</div>
		<form
			hx-post="/invoice"
			hx-target="#invoice"
			hx-swap="innerHTML"
			hx-indicator="#htmx-indicator"
			hx-disabled-elt="#submit-invoice"
			x-data="{ canSubmit: false, isHTMXRequest: false }"
			x-on:disable-submit.window="canSubmit = false"
			x-on:enable-submit.window="canSubmit = true"
			x-on:htmx:before-request="isHTMXRequest = true"
			x-on:htmx:after-request="isHTMXRequest = false"
			class="flex flex-col items-stretch h-full mb-0"
			id="invoice-form"
		>
			<div class="flex flex-col flex-1">
				@Boards(nil)
				<div class="flex flex-row flex-wrap gap-x-1.5 justify-stretch">
					@input("start-date", "Start date",
                            templ.Attributes{"type": "date", "required": "true",
                            })
					@input("end-date", "End date",
                            templ.Attributes{"type": "date", "required": "true",
                            "x-data": `{
                               async validate() {
                                 const startDate = Date.parse(document.querySelector('#start-date'))
                                                   || await new Promise(r => setTimeout(r, 20))
                                                   && Date.parse(document.querySelector('#start-date'));
                                 if (Date.parse($el.value) <= Date.parse(document.querySelector('#start-date').value)) {
                                   $el.setCustomValidity('End date must be later than start date.');
                                 } else {
                                   $el.setCustomValidity('');
                                 }
                               },
                               value: $persist('').as('invoice_end-date'),
                            }`,
                            "x-on:change":
                            `validate();
                             value = $el.value;`,
                            "x-init":
                            `validate();
                             $el.value = value`,
                            })
				</div>
			</div>
			<fieldset class="flex flex-col mt-1.5 gap-1 items-start">
				<legend class="block font-medium mb-0.5 text-gray-900">Rate per hour</legend>
				@currencyInput("t5", "T5")
				@currencyInput("t4", "T4")
				@currencyInput("t3", "T3")
				@currencyInput("t2", "T2")
				@currencyInput("t1", "T1")
			</fieldset>
			<div class="mt-5 ml-auto flex flex-col items-end ">
				<p id="validation-error" class="text-right text-sm text-red-700 max-w-[15rem]"></p>
				@component.Button(templ.Attributes{
                        "type": "submit",
                        "id": "submit-invoice",
                        "x-bind:disabled": "!canSubmit",
                        "x-init": `$watch('isHTMXRequest', value =>
                                     buttonDisabledClass = value ? 'disabled:cursor-wait'
                                                                 : 'disabled:cursor-not-allowed')`,
                        }) {
					Calculate
				}
			</div>
		</form>
		<div id="errors" class="mt-3"></div>
		@settings()
	}
}

templ settings() {
	<details
		class="flex flex-col mt-3"
		x-data="{ canSubmit: false }"
		x-on:open-settings.window="$el.setAttribute('open', '')"
	>
		<summary>Settings</summary>
		<form
			hx-get="/boards"
			hx-indicator="#htmx-indicator"
			hx-validate
			x-data="{ trello: { key: '', token: '' }}"
			x-init="trello = { key: $store.trelloAuth.key, token: $store.trelloAuth.token }"
			x-on:submit="canSubmit = false;
                         $store.trelloAuth.key = trello.key;
                         $store.trelloAuth.token = trello.token;
                         "
			class="mb-0"
		>
			<div class="mb-0">
				@hiddenInput("trello-api-key", "Trello API key",
                    templ.Attributes{
                                     "required": true, "minlength": "32", "maxlength": "32",
                                     "x-model": "trello.key",
                                     "x-on:input": "canSubmit = true",
                                     })
				@hiddenInput("trello-api-token", "Trello API token",
                    templ.Attributes{
                                     "required": true, "minlength": "76", 
                                     "x-model": "trello.token",
                                     "x-on:input": "canSubmit = true",
                                     })
			</div>
			<div class="flex flex-row justify-between items-end mt-3">
				<p>
					@component.Link("https://developer.atlassian.com/cloud/trello/guides/rest-api/authorization/") {
						Trello - Authorizing With Trello's REST API
					}
				</p>
				@component.Button(templ.Attributes{
                    "type": "submit",
                    "x-bind:disabled": "!canSubmit",
                    "id": "save-auth", }, "ml-auto self-end",) {
					Save
				}
			</div>
		</form>
		<script>
            document.addEventListener('alpine:initializing', () => {
                Alpine.store("trelloAuth", {
                    key: Alpine.$persist("").as("trelloAuth-key"),
                    token: Alpine.$persist("").as("trelloAuth-token"),
                });

                htmx.on("htmx:configRequest", evt => {
                    evt.detail.headers["X-Trello-API-Key"] = Alpine.store("trelloAuth").key;
                    evt.detail.headers["X-Trello-API-Token"] = Alpine.store("trelloAuth").token;
                });

                // Need to sleep so that htmx:configRequest actually adds
                // the Trello key request headers
                setTimeout(() => htmx.ajax("GET", "/boards"), 100);
            })
        </script>
	</details>
}

templ input(id, label string, inputAttrs templ.Attributes) {
	<div class="flex-1">
		<label for={ id } class="block mt-1.5 font-medium text-gray-900">{ label }</label>
		<input
			{ inputAttrs... }
			name={ id }
			id={ id }
			class={ inputStyle, "w-full" }
			{ persistForm(id)... }
		/>
	</div>
}

func persistForm(name string) templ.Attributes {
	return templ.Attributes{
		"x-init":      "$el.value = value",
		"x-data":      fmt.Sprintf("{ value: $persist('').as('invoice_%s') }", name),
		"x-on:change": "value = $el.value",
	}

}

templ currencyInput(name string, display string) {
	<div class="flex flex-row items-center gap-1 flex-1">
		<label for={ name } class="font-medium text-gray-900">{ display }</label>
		<div class="relative">
			<div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-1">
				<span class="text-gray-500">$</span>
			</div>
			<input
				type="number"
				step="0.01"
				name={ name }
				id={ name }
				class={ inputStyle, " pl-4 mr-auto max-w-40" }
				required
				{ persistForm(name)... }
			/>
		</div>
	</div>
}

templ hiddenInput(id, label string, inputAttrs templ.Attributes) {
	<div class="flex-1 relative" x-data="{ hidden: true }">
		<label for={ id } class="mt-1.5 font-medium text-gray-900 flex flex-row items-end gap-1">
			{ label }
		</label>
		<button
			x-on:click="hidden = ! hidden"
			type="button"
			class="absolute right-1 top-7 text-gray-500 hover:text-gray-600 active:text-gray-900"
		>
			<div x-show="hidden">
				@svg.EyeSlash()
			</div>
			<div x-show="!hidden">
				@svg.Eye()
			</div>
		</button>
		<input
			{ inputAttrs... }
			x-bind:type="hidden ? 'password' : 'text'"
			autocomplete="off"
			name={ id }
			id={ id }
			class={ inputStyle, "w-full text-sm pr-8" }
		/>
	</div>
}
